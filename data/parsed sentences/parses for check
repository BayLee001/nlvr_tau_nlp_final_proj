1. There are exactly four ALL_ITEMS not touching any edge

	equal(4,count(filter(ALL_ITEMS, lambda x : NOT(is_touching_wall(x)))))
	
	equal_int(4,count(filter(ALL_ITEMS, lambda x : NOT(is_touching_wall(x)))))
	
	# same as mine but the syntax of lambda
	
	# equal_int 4 count filter ALL_ITEMS lambda x not touchwall x
	

2. There is a box with at least one square and at least three triangles.
	
	exist(filter(ALL_BOXES, lambda y : AND(le(1, count(filter(y, lambda x : is_square(x)))), le(3, count(filter(y, lambda z : is_triangle(z)))))))

3. There is a tower with yellow base.

	exist(filter(ALL_BOXES, lambda x : exist(filter(filter(x, lambda y : is_bottom(y)), lambda z : is_yellow(z)))))
	exist(filter(ALL_BOXES, lambda x : exist(filter(x, lambda y : AND (is_bottom(y), is_yellow(y))))))
	exist(filter(ALL_BOXES, lambda x : is_yellow(unique(filter(x, lambda y : is_bottom(y))))))
	
4. There is a black item in every box.
	
	All(ALL_BOXES, lambda x : exist(filter(x, lambda y : is_black(y))))
	
5. There are 2 blue circles and 1 blue triangle

	AND(equal(2,count(filter(filter(ALL_ITEMS, lambda y : is_blue(y)), lambda x : is_circle(x)))) ,equal(1,count(filter(filter(ALL_ITEMS, lambda z : is_blue(z)), lambda w : is_triangle(w)))))
	AND(equal(2,count(filter(ALL_ITEMS, lambda y : AND(is_blue(y), is_circle(y))))) ,equal(1,count(filter(ALL_ITEMS, lambda z : AND(is_blue(z), is_triangle(z))))))	

	
6. There is a blue triangle touching the wall with its side.
	
	#exist(filter(ALL_ITEMS, lambda x : AND(is_blue(x),AND(is_triangle(x),is_touching_wall(x)))))
	exist(filter(ALL_ITEMS, lambda x : AND(is_blue(x),AND(is_triangle(x),is_touching_wall(x, Side.BOTTOM)))))
	exist(filter(filter(filter(ALL_ITEMS, lambda x : is_blue(x)), lambda y: is_triangle(y)), lambda z : is_touching_wall(z, Side.BOTTOM)))

	# note that "with its side" is understool as the triangle's 'TZELA'

	
7. there is one tower with a yellow block above a yellow block 
	
	#equal(1,count(filter(lambda z :filter(lambda y :yellow(y),filter(lambda x :square(x),relate(above,filter(lambda y :yellow(y),filter(lambda x :square(x),z))))),ALL_BOXES)))
	#equal(1,count(filter(lambda z :filter(lambda y :AND(yellow(y),square(y)),relate(above,filter(AND(yellow(y),square(y)),z))),ALL_BOXES)))
	le(1, count(filter(ALL_BOXES, lambda x: exist(filter(get_above(filter(x, lambda y: is_yellow(y))), lambda z : is_yellow(z))))))
	
8. There are two towers that has different base color but the same color in the second block.

	#exist(Lxlambda y :AND(NOT(same(union(color(bottom(x)),color(bottom(y))))),same(union(color(relate(above,bottom(x))),relate(above,color(bottom(y)))))),pairs(ALL_BOXES))
	
	
	#le(2, count(argmax(lambda x :count(x), filter(lambda z : AND(NOT(same(color(bottom(z)))), same(color(second(z)))) ,powerset(ALL_BOXES)))))
	
	#exist(filter(lambda(z, AND(equal_color(query_color(unique(filter_location(base, get_by_index(z, 1)))), query_color(unique(filter_location(base, get_by_index(z, 2))))),NOT(equal_color(query_color(unique(filter_location(second, get_by_index(z, 1)))), query_color(unique(filter_location(second, get_by_index(z, 2))))))), select(2, all_ALL_BOXES)))

	exist(filter(select(ALL_BOXES, 2), lambda x: AND(NOT(all_same(query_color(filter(union_all(x), lambda y : is_bottom(y))))), all_same(query_color(filter(union_all(x), lambda z : is_second(z)))))))

9. There is a box with seven items and the three black items are the same in shape

	AND(exist(filter(ALL_BOXES, lambda x : (equal(7,count(x))))), exist(filter(select(filter(ALL_ITEMS, lambda y : is_black(y)), 3), lambda z: all_same(query_shape(z)))))

	
10. there is exactly one black triangle not touching the edge

	equal(1,count(filter(filter(filter(ALL_ITEMS, lambda y : is_black(y)), lambda x : is_triangle(x)), lambda z :NOT(is_touching_wall(z)))))
	equal(1,count(filter(ALL_ITEMS, lambda x : AND(NOT(is_touching_wall(x)),AND(is_black(x), is_triangle(x))))))
	
	
11. t least two boxes have the same number of objects each and the same number of object touching the side.
	
	exist(filter(select(ALL_BOXES,2), lambda x : AND(all_same_attribute(x, lambda y : count(y)), all_same_attribute(x, lambda z: count(filter(z, lambda w: is_touching_wall(w)))))))
	#exist(Lxlambda y :AND(equal(count(x),count(y)),equal(count(filter(lambda z :touchwall(z),x)),count(filter(lambda w :touchwall(w),y)))),pairs(ALL_BOXES))
	
	#le(2, count(argmax(lambda x :count(x), filter(lambda z : AND(same(color(bottom(z)))), same(color(second(z)))) ,powerset(ALL_BOXES)))))
	
	#exist(lambda(y, AND(equal_integer(count(get_by_index(y,1)),count(get_by_index(y,2))),equal_integer(count(filter(lambda(x, query_touching_wall(x)) ,get_by_index(y,1))), count(filter(lambda(x, query_touching_wall(x)) ,get_by_index(y,2)))))) , select(2, all_ALL_BOXES))	


12. There is a box with only blue and yellow items of which there are only yellow squares.

	exist(filter(ALL_BOXES, lambda x : AND(All(x, lambda y : OR(is_blue(y), AND(is_yellow(y), is_square(y)))), equal(2,count(query_color(x))))))
	
		

13. there is at least one tower with four blocks with a yellow block at the base and a blue block below the top block

	exist(filter(ALL_BOXES, lambda x : AND(equal(4,count(x)), AND (exist(filter(x, lambda y : AND(is_bottom(y), is_yellow(y)))), exist(filter(get_below(filter(x, lambda z : is_top(z))), lambda w : is_blue(w)))))))
	
	# this is not correct - you switched blue and yellow and ignored the word *below
	
	#le(1,count(filter(lambda(y,AND(equal_integer(4, count(y)), AND(equal_color(yellow, query_color(unique(filter_location(base, y)))),equal_color(blue, query_color(unique(relate(below,(unique(filter_location(top, y)))))))))), all_ALL_BOXES)))
	#le(1,count(filter(lambda(y,AND(equal_integer(4, count(y)), AND(exist(filter_color(yellow, filter_location(base, y))), exist(filter_color(blue, relate(below, unique(filter_location(top, y)))))))), all_ALL_BOXES)))


14. There is a four block tower where the base and second blocks are the same in color.

	exist(filter(ALL_BOXES, lambda x : AND(equal(4,count(x)), equal(query_color(filter(x, lambda y: is_bottom(y))),query_color(filter(x, lambda z: is_second(z)))))))

	exist(filter(ALL_BOXES, lambda x : AND(equal(4,count(x)), all_same(query_color(filter(x, lambda y: OR(is_bottom(y), is_second(y))))))))
	
	# exist(lambda x :AND(equal(4,count(x)),equal(color(union(bottom(x), relate(above,bottom(x)))))),ALL_BOXES)
	
	#exist(filter(lambda(y,AND(equal_integer(4, count(y)), equal_color(query_color(unique(filter_location(base, y))), query_color(unique(filter_location(second, y)))))), all_ALL_BOXES))



15. There is a blue block as the base of a tower with at most three blocks.

	exist(filter(ALL_BOXES, lambda x : AND(ge(3, count(x)), exist(filter(x, lambda y : AND(is_blue(y),is_bottom(y)))))))
	
	exist(filter(ALL_ITEMS, lambda x : AND(is_blue(x), AND(is_bottom(x), ge(3, count(get_box_inclusive(x)))))))
	
	# again problem with the definition of bottom
	
	#exist(filter(lambda(x, ge(3, count(get_box_inclusive(x)))), filter_location(base,filter_color(blue,all_ALL_ITEMS))))
	#exist(filter(lambda(y, AND(ge(3, count(y)), equal_color(blue,query_color(unique(filter_location(base, y)))))), all_ALL_BOXES))
	

16. There is a box with all 3 different colors and a black triangle touching the wall with its top.

	exist(filter(ALL_BOXES, lambda x : AND(equal(3, count(query_color(x))), exist(filter(x, lambda y : AND(is_black(y), AND(is_triangle(y), is_touching_wall(y, Side.TOP))))))))
	
	#exist(lambda x :AND(AND(exist(lambda y :blue(y),x),exist(lambda z :yellow(z),x)),AND(exist(lambda w :black(w),x),exist(lambda u :AND(black(u),AND(triangle(u),touchwall(u))),x))),ALL_BOXES)
	
	#exist(filter(ALL_BOXES, lambda x : AND(equal(3,count(color(x))), exist(filter(x, lambda y :(AND(black(y), AND(triangle(y), touching_top_wall(y)))))))))
	
	#exist(filter(lambda(y, AND(equal_set(query_color_set(y), AllColors) ,exist(filter(lambda(x, query_touching_top_wall(x)), filter_color(black,filter_shape(triangle, y)))))),all_ALL_BOXES))

	
17. There is a box with multiple items and only one item has a different color

	#exist(lambda x :AND(greater_equal(2,count(x)),equal(1,diff(count(x),countsame(color(x))))),ALL_BOXES)
	
	exist(filter(ALL_BOXES, lambda x : AND(le(3,count(x)), equal(1, count(filter(x, lambda y : NOT(contained(query_color(y), query_color(get_box_exclusive(y))))))))))
	
	
	#exist(filter(lambda(y,AND(le(3, count(y)), equal_integer(1, count(filter(lambda(x, AND(all_same_color(get_box_exclusive(x)), NOT(MemberOf(query_color(x), query_color_set(get_box_exclusive(x)))))), y))))),all_ALL_BOXES))
	#exist(filter(lambda(y,AND(le(3, count(y)), equal_integer(1, count(filter(lambda(x, all_same_color(get_box_exclusive(x))), y))))),all_ALL_BOXES))
	#exist(filter(lambda(y,AND(le(3, count(y)), equal_integer(1, count(filter(lambda(x,all_same_color(symmetric_difference(y, MakeSet(x)))), y))))),all_ALL_BOXES))

	
	

20. there is a box with 2 items at most of which one is a triangle

	#exist(filter(ALL_BOXES, lambda x :AND(ge(count(x),2),equal(1,count(filter(x, lambda y :triangle(y)))))))
	
	#final:
	exist(filter(ALL_BOXES, lambda x : (lambda z : AND(ge(2, count(z) ), equal(1, count(filter(z, lambda  w: is_triangle(w))))) )(x)))
	

21. there is a four block tower and the top block is blue

	
	#final
	exist(filter(ALL_BOXES, lambda x : AND(equal(4,count(x)),exist(filter(x, lambda y :AND(is_blue(y),is_top(y)))))))
	exist(filter(ALL_BOXES, lambda x : AND(equal(4,count(x)), is_blue(unique(filter(x. lambda y :is_top(y)))))))

22. there is a box with a yellow item and only black items on top of it

	
	# final
	exist(filter(ALL_BOXES, lambda x : exist(filter(x, lambda y : AND(is_yellow(y), All(get_above(y), lambda z : is_black(z) ))))))
	
	
23. at least one of the tower with four blocks has exactly same color block at the top and base

	
	#final
	le(1, count(filter(filter(ALL_BOXES, lambda x : equal(4, count(x))), lambda y : all_same(query_color(filter(y, lambda z : OR(is_top(z), is_bottom(z))))))))
	le(1, count(filter(filter(ALL_BOXES, lambda x : equal(4, count(x))), lambda y : equal(query_color(filter(y, lambda z : is_top(z))), query_color(filter(y, lambda w :is_bottom(w)))))))

	
24. there is a box with at least three black item of the same shape

	#exist(lambda x :greater_equal(3,countsame(shape(filter(lambda y :black(y),x)))),boxes)
	
	exist(filter(ALL_BOXES, lambda x :le(3, countsame(query_shape(filter(x, lambda y :black(y)))))))
	#exist(filter(boxes, lambda x :le(3,count(argmax(lambda y : count(y), filter(powerset(x, lambda w : AND(all(w, lambda z : black(z)), allsame(shape(w))))))))))
	
	
	#exist(filter(boxes, lambda x :exist(powerset(x),lambda y : AND(le(3, count(y)), AND(all(y, lambda z : black(z)), allsame(shape(y)))))))
	

25. there are 2 yellow items touching each other

	le(count(2, filter(ALL_ITEMS, lambda x : AND(is_yellow(x), exist(filter(get_touching(x), lambda y: is_yellow(y))))))) 

	#exist(Lxlambda y :touch(x,y),pairs(filter(lambda z :yellow(z),objects)))
	
	#le(2, count(argmax(lambda y : count(y), filter(powerset(filter(all_items, lambda x : yellow(x))), lambda w : touching(w))))) --- bad!
	
	#le(2, count(filter(relate(touch, filter(all_items, lambda x : yellow(x))), lambda y : yellow(y))))
	
	
	
26. there is a box with a yellow item and 2 black item touching each other

	#exist(lambda x :AND(exist(lambda y :yellow(y),x),exist(Lulambda v :touch(u,v),pairs(filter(lambda z :black(z),x)))),boxes)
	
	exist(filter(boxes, lambda z : AND(exist(z, filter(lambda w : is_yellow(w))) ,le(2, count(filter(get_touching(filter(z, lambda x : is_black(x))), lambda y : is_black(y)))))))
